keywords: ["blip", "lua", "luau", "camera", "view", "perspective", "position", "rotation", "field of view", "3d"]
type: "Camera"
extends: "Object"
description: |
  A `Camera` is an object that can be placed in the scene to render all or select elements based on their layers.

  The global instance `Camera` corresponds to the default main camera that renders to fullscreen. Additional cameras are rendered on top, according to their view order. Their output can optionally be displayed inside a custom screen rectangle, called a target.

  All camera modes listed on this page are implemented in Lua, it's totally possible to implement custom ones.

  Code examples of `Camera`'s various fields can be found in the following worlds,
  - `Camera Projection Modes`
  - `Radar FX Example`
  - `Multi Camera UI Example`
  - `Minimap Example`

properties:
    - name: "FieldOfView"
      type: "number"
      description: |
          Can be set to change Camera's minimum field of view, default value is 60 degrees.

          The minimum field of view equates to the vertical field of view in landscape, or to the horizontal field of view in portrait. This is to ensure a consistent look&feel between screen orientations or aspect ratios.

      samples:
        - code: |
            Camera.FieldOfView = 40.0

    - name: "FOV"
      type: "number"
      description: |
          Shortcut to [Camera.FieldOfView](#property-fieldofview).
    
    - name: "VerticalFOV"
      read-only: true
      type: "number"
      description: |
          Returns the vertical field of view, depending on current screen orientation. This is based on the minimum field of view [FieldOfView](#property-fieldofview).
    
    - name: "HorizontalFOV"
      read-only: true
      type: "number"
      description: |
          Returns the horizontal field of view, depending on current screen orientation. This is based on the minimum field of view [FieldOfView](#property-fieldofview).

    - name: "Layers"
      type: "table"
      description: |
          Integer or table of integers between 1 and 12. Only objects in one of the specified layers are rendered by the camera.

    - name: "Width"
      type: "number"
      description: |
          Width of the camera projection.

    - name: "Height"
      type: "number"
      description: |
          Height of the camera projection.

    - name: "Near"
      type: "number"
      description: |
          Near plane of the camera projection.

    - name: "Far"
      type: "number"
      description: |
          Far plane of the camera projection.

    - name: "Projection"
      type: "ProjectionMode"
      description: |
          The projection mode can be one of `ProjectionMode.Perspective` (by default) or `ProjectionMode.Orthographic`.

          Note that it can be changed at any time.

    - name: "TargetX"
      type: "number"
      description: |
          X component of the camera screen target bottom-left corner, expressed in screen points.

    - name: "TargetY"
      type: "number"
      description: |
          Y component of the camera screen target bottom-left corner, expressed in screen points.

    - name: "TargetWidth"
      type: "number"
      description: |
          Width of the camera screen target, expressed in screen points.

    - name: "TargetHeight"
      type: "number"
      description: |
          Height of the camera screen target, expressed in screen points.

    - name: "Color"
      type: "Color"
      description: |
          Multiplicative color applied on camera final render.

    - name: "Alpha"
      type: "number"
      description: |
          Shortcut to [Camera.Color](#property-color) alpha.

    - name: "ViewOrder"
      type: "integer"
      description: |
          Integer between 1 and 255 used to order multiple cameras. Additional cameras created in Lua have a default value of `127`. The main `Camera` provided by Blip engine has a default value of `0`.

          Note that as of version `0.1.1`, setting an orthographic camera's view order to be rendered before a perspective camera will make it use render scaling instead of points scaling (see [Camera](reference/camera)). This may be addressed in future updates.

    - name: "On"
      type: "boolean"
      description: |
          Whether the camera is active or not.

    - name: "Behavior"
      type: "table"
      description: |
          A table that can be set to describe how the camera should behave: how it moves, rotates, collides with other objects, etc.
          It can be set to `nil` to disable current behavior.

          Fields accepted:
          - `positionTarget`: [Object] to follow, or [Number3] position to go to.
          - `positionTargetOffset`: Fixed [Number3] offset to apply to the target position.
          - `positionTargetBackoffDistance`: distance ([number]) to backoff from the target position (considering collisions and current rotation).
          - `positionTargetMinBackoffDistance`: minimum distance ([number]) to backoff from the target, going through colliders if needed, also the minimum distance user can set using mouse wheel or pinch gesture.
          - `positionTargetMaxBackoffDistance`: maximum distance ([number]) user can set using mouse wheel or pinch gesture.
          - `rotationTarget`: [Object]'s rotation or [Rotation] to rotate to.
          - `rigidity`: [number], generally between 0 and 1, setting how fast the camera moves to the target.
          - `collidesWithGroups`: [CollisionGroups] that the camera will collide with.

          More fields will be added in future updates! But this set already allows to create a lot of different camera behaviors.
          Also, you can always set `Camera.Behavior = nil` and implement your own logic manipulating `Camera` as any other [Object].

      samples:
        - code: |
            -- a "third person" camera, following the player and looking in the same direction as its head
            Camera.Behavior = {
              positionTarget = Player, -- camera goes to that position (or position of given object)
              positionTargetOffset = { 0, 14, 0 }, -- applying offset (looking right above the head)
              positionTargetBackoffDistance = 40, -- camera tries to backoff that distance, considering collisions
              positionTargetMinBackoffDistance = 20,
              positionTargetMaxBackoffDistance = 100,
              rotationTarget = Player.Head, -- camera rotates to that rotation (or rotation of given object)
              rigidity = 0.5, -- how fast the camera moves to the target
              collidesWithGroups = nil, -- camera collides with objects in these groups
            }

            -- a camera to follow vehicles, less rigid and looking a bit from above the vehicle
            Camera.Behavior = {
              positionTarget = plane,
              positionTargetOffset = { 0, 5, 0 },
              positionTargetBackoffDistance = 70,
              positionTargetMinBackoffDistance = 20,
              positionTargetMaxBackoffDistance = 200,
              rotationTarget = plane,
              rotationTargetOffset = Rotation(math.rad(10), 0, 0), -- tilting 10 degrees down
              rigidity = 0.25,
              collidesWithGroups = nil,
            }


functions:
    - name: "CastRay"
      argument-sets: 
        -
        -
          - name: "filterIn"
            type: "CollisionGroups"
        -
          - name: "filterIn"
            type: "Shape"
        -
          - name: "filterIn"
            type: "nil"
          - name: "filterOut"
            type: "Object"
        -
          - name: "filterIn"
            type: "CollisionGroups"
          - name: "filterOut"
            type: "Object"
        -
          - name: "filterIn"
            type: "Shape"
          - name: "filterOut"
            type: "Object"
      return: 
        - type: "Impact" 
      description: |
          Casts a ray and returns an [Impact] (can be [nil]).

          The [Impact] contains information about the kind of thing that's been hit.

          💡 Calls [Ray].[Cast](/reference/ray#functions-cast) under the hood. See [Ray].[Cast](/reference/ray#functions-cast) definition for more details about possible filters.
      samples:
        - code: |
            local impact = Camera:CastRay()
            if impact.Block ~= nil then
              print("block hit:", impact.Block)
            end

    - name: "FitToScreen"
      description: |
          Fits the given [Shape], [Mesh] or [Box] to the screen, taking into account the camera's [Projection](#property-projection) mode. This function moves the camera back until the target fits on screen.

          For example, to fit an object at the center of the screen, first have the camera look at the target (`camera.Forward = target.Position - camera.Position`) before calling this function.

          Optional parameters:
          - `coverage` indicates how much of the screen should be covered by the target. You can use this to adjust the fit, increasing this value will effectively zoom in on the target, decreasing it will zoom out.
          - `orientation` may be used to force the use of a single dimension, instead of automatically choosing the limiting dimension. Valid values are "vertical" or "horizontal".
      argument-sets:
        -
          - name: "target"
            type: "Shape"
          - name: "options"
            type: "table"
            optional: true
        -
          - name: "target"
            type: "Box"
          - name: "options"
            type: "table"
            optional: true
        -
          - name: "target"
            type: "Mesh"
          - name: "options"
            type: "table"
            optional: true
      samples:
        - code: |
            -- make the camera look at the shape
            Camera.Forward = myShape.Position - Camera.Position

            -- make the shape's bounding box cover approximately 60% of the screen, depending on perspective
            Camera:FitToScreen(myShape, { coverage = 0.6 })

            -- here's how to set independent constraints vertically and horizontally:
            Camera:FitToScreen(myShape, { coverage = 0.8, orientation = "horizontal" })
            local d = (Camera.Position - myShape.Position).SquaredLength
            local p = Camera.Position:Copy() -- save position for horizontal fit
            Camera:FitToScreen(myShape, { coverage = 0.6, orientation = "vertical" })
            local d2 = (Camera.Position - myShape.Position).SquaredLength
            if d > d2 then -- if horizontal fit is better, go back to the saved position
              Camera.Position = p
            end
    
    - name: "WorldToScreen"
      description: |
          Converts a world position ([Number3]) into unsigned normalized screen coordinates through this camera projection. The returned [Number2] coordinates are between `{0, 0}` (bottom left corner of the screen) and `{1, 1}` (top right corner of the screen).

          ⚠️ [WorldToScreen](#functions-worldtoscreen) can return [nil] if the given position can't be seen by the camera (not on screen).

      samples:
        - code: |
            local screenCoords = Camera:WorldToScreen(someObject.Position)
            -- screenCoords is a Number2 between {0, 0} (bottom left) and {1, 1} (top right),
            -- it can be nil if someObject.Position can't be seen by the camera.
            if screenCoords ~= nil then 
              -- to obtain screen point values, multiply by Screen.Size:
              local screenPos = screenCoords * Screen.Size

              -- this is useful when positioning UI elements:
              local text = require("uikit"):createText("Hello, world!")
              text.pos = { -- text's anchor is bottom left, offsetting to center
                screenPos.X - text.Width * 0.5,
               screenPos.Y - text.Height * 0.5
              }
            end


      arguments: 
        - name: "position"
          type: "Number3"
      return:
        - type: "Number2"
    
    - name: "ScreenToRay"
      description: |
          Converts unsigned normalized screen coordinates ([Number2] between `{0, 0}` (bottom left) and `{1, 1}` (top right)) into a [Ray] based on this camera projection.
      arguments: 
        - name: "point"
          type: "Number2"
      return:
        - type: "Ray"

