keywords: ["blip", "lua", "luau", "mutable shape", "voxel", "editable", "blocks", "dynamic", "construction", "model"]
type: "MutableShape"
extends: "Shape"
description: A [MutableShape] is a [Shape] which [Block]s can be modified.

constructors: 
  - description: |
        Creates a [MutableShape] which model can be empty, loaded from an imported [Item] (see [Items]), or copied from an existing [Shape] or [MutableShape].

        The optional [table] parameter can be used to override default configuration: `{recurse = false, bakedLight = false}`.
        - `recurse` (false by default) will copy and replicate the full shape hierarchy, including all children objects.
        - `bakedLight` (false by default) determines whether or not the shape should be loaded with baked lighting.  If `true`, it will use the baked lighting information saved with the original item, or compute it from scratch if there was none. Any subsequent changes to the shape's blocks will automatically maintain its baked lighting.
    
        The first step after creating a shape is usually to add it to the world using [SetParent](#function-setparent) or [AddChild](#function-addchild), then place it by setting its [Position](#property-position).
    argument-sets:
      -
        - name: "config"
          type: "table"
          optional: true
      -
        - name: "item"
          type: "Item"
        - name: "config"
          type: "table"
          optional: true
      -
        - name: "copiedShape"
          type: "Shape"
        - name: "config"
          type: "table"
          optional: true
      -
        - name: "copiedMutableShape"
          type: "MutableShape"
        - name: "config"
          type: "table"
          optional: true

    samples:
      - code: |
          -- create shape from items declared in the [Items] table
          -- the created copy will be a mutable shape
          local myMutableShape = MutableShape(Items.someuser.someitem)

          -- add to the world and place it
          World:AddChild(myMutableShape)
          myMutableShape.Position = { 0, 5, 15 }
      - 
        code: |
          -- create a full copy of a composite shape, including all children objects
          -- the created copy will be a mutable shape
          local myMutableShape = MutableShape(myCompositeShape, {includeChildren = true})
properties:

functions:
    - name: "AddBlock"
      description: |
          Adds a [Block] to the [This]. You may provide a [Block], a palette index to an existing color in [This]'s [Palette], or any color which will be added automatically to the [This]'s [Palette] if needed.
          
          Returns `true` if a block was successfully added.
      argument-sets:
        -
          - name: "block"
            type: "Block"
        -
          - name: "paletteIndex"
            type: "integer"
          - name: "position"
            type: "Number3"
        -
          - name: "paletteIndex"
            type: "integer"
          - name: "X"
            type: "number"
          - name: "Y"
            type: "number"
          - name: "Z"
            type: "number"
        -
          - name: "color"
            type: "Color"
          - name: "position"
            type: "Number3"
        -
          - name: "color"
            type: "Color"
          - name: "X"
            type: "number"
          - name: "Y"
            type: "number"
          - name: "Z"
            type: "number"
        -
      return: 
        - type: "boolean"
      samples:
      - code: |
          -- providing an existing palette index
          someMutableShape:AddBlock(1, 10, 10, 10)

          -- providing a new color index
          local newColorIdx = someMutableShape.Palette:AddColor(Color(200, 0, 200))
          someMutableShape:AddBlock(newColorIdx, 10, 10, 10)

          -- providing a Block instance
          local block = Block(Color(200, 0, 200), 10, 10, 10)
          someMutableShape:AddBlock(block)

          -- returns whether the block was added or not:
          local added = someMutableShape:AddBlock(1, 10, 10, 10)
          if added ~= false then
            -- block successfully created!
          end

    - name: "GetBlock"
      description: |
          Gets a [Block] from the [This]. 
          Returns [nil] if there is no [Block] at the given coordinates (i. e. if it's "air").

      arguments: 
        - name: "X"
          type: "number"
        - name: "Y"
          type: "number"
        - name: "Z"
          type: "number"
      return: 
        - type: "Block"
