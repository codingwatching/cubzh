keywords: ["blip", "lua", "luau", "text", "label", "font", "display", "ui", "string", "interface"]
type: "Text"
extends: "Object"
description: |
    A `Text` is an object with a text and optional background frame attached.
  
    It may be used in two different display modes by setting its [Text.Type](#property-type) field,
    - as a `TextType.World`, it will behave exactly like any other object in the scene, great for creating postsigns;
    - as a `TextType.Screen`, it will be displayed from its position in the scene always facing the camera, like an UI element - great for text bubbles.
  
    By default, a [This] is set to `TextType.World`.
  
    If you were using the deprecated `Object:TextBubble` and `Object:ClearTextBubble` functions prior to 0.0.48, you may use the "textbubble.lua" module. It contains the following functions which use [This] objects instead,
    - import the module with `tb = require("textbubble.lua")`
    - `tb.set(object, text, duration, offset, color, backgroundColor, tail)`
    - `tb.clear(object)`

constructors: 
  - description: "Creates a Text with default properties."
    samples:
      - code: |
          local t = Text()

          -- change text properties
          t.Text = "Hello world!"
          t.Type = TextType.Screen
          t.IsUnlit = true
          t.Tail = true

          -- use it as a normal object in the scene
          t:SetParent(Player)
          t.LocalPosition = { 0, 34, 0 }

properties:
    - name: "Type"
      type: "TextType"
      description: |
          The text type can be set to `TextType.World` (default) or `TextType.Screen`.
        
          As a `TextType.World`, the text will be translated, rotated, and scaled like any other object in the scene, eg. a signpost.
          As a `TextType.Screen`, the text will be displayed in front of everything else, facing the camera from its position in the scene, eg. a text bubble above a player's head.
        
          Note that it can be changed at any time. Some [This] fields are then expressed in world units or points based on the text type.

    - name: "Text"
      type: "string"
      description: |
          The text to be displayed, set an empty string to hide it.

    - name: "Color"
      type: "Color"
      description: |
          Color of the text, black by default.

    - name: "BackgroundColor"
      type: "Color"
      description: |
          Color of the background frame, disabled by default. Set alpha to zero to disable.

    - name: "Anchor"
      type: "Number2"
      description: |
          Anchor of the text, `text.Anchor = { 0.5, 0.5 }` by default, which corresponds to the middle of the text.

    - name: "MaxDistance"
      type: "number"
      description: |
          Maximum distance in world units beyond which the text will disappear, `350.0` by default.

    - name: "Tail"
      type: "boolean"
      description: |
          Whether to display a tail under the background frame, like a text bubble, `false` by default.

    - name: "Width"
      type: "number"
      read-only: true
      description: |
          Width of the [This] with points scaling. Use this value if the text type is `TextType.Screen`, or if you are scaling your scene using [Screen](reference/screen).[Width](reference/screen#property-width) and [Screen](reference/screen).[Height](reference/screen#property-height) points values.
        
          This accounts for the total size including background frame, padding, and tail.

    - name: "Height"
      type: "number"
      read-only: true
      description: |
          Height of the [This] with points scaling.  Use this value if the text type is `TextType.Screen`, or if you are scaling your scene using [Screen](reference/screen).[Width](reference/screen#property-width) and [Screen](reference/screen).[Height](reference/screen#property-height) points values.
        
          This accounts for the total size including background frame, padding, and tail.

    - name: "RawWidth"
      type: "number"
      read-only: true
      description: |
          Width of the [This] in world units.
        
          This accounts for the total size including background frame, padding, and tail.

    - name: "RawHeight"
      type: "number"
      read-only: true
      description: |
          Height of the [This] in world units.
        
          This accounts for the total size including background frame, padding, and tail.

    - name: "Padding"
      type: "number"
      description: |
          Text padding over background in world units, `0.8` by default. Expressed in points if the text type is `TextType.Screen`.

    - name: "FontSize"
      type: "number"
      description: |
          Font size in world units, `2.2` by default. Expressed in points if the text type is `TextType.Screen`.

          Built-in font point sizes can be accessed by setting the following strings: "default", "small", or "big". These sizes are internally calculated based on screen density, and can be used to maximize readability accross devices.

    - name: "Layers"
      type: "table"
      description: |
          Integer or table of integers between 1 and 12. Cameras only render objects corresponding to their layers.

    - name: "MaxWidth"
      type: "number"
      description: |
          Maximum width in world units beyond which the text will automatically break line, `0` by default (disabled). Expressed in points if the text type is `TextType.Screen`.

    - name: "IsUnlit"
      type: "boolean"
      description: |
          Whether or not the [This] should ignore scene lighting, `false` by default.
    
    - name: "Font"
      type: "Font"
      description: |
          The font used by [This]'s text message. It can be one of the following,
          - `Font.Pixel`: a pixel font which generally scales well whatever the size. It is lit by [Shape](reference/shape)'s baked lighting, and can be lit by [Light](reference/light) objects if the text's color is opaque. Internally, transparent texts using this font are rendered within an order-independant pass.
          - `Font.Noto`: a vector font which will look smoother, but may not always scale well when displaying extremely big texts. It is lit by [Shape](reference/shape)'s baked lighting, but not by [Light](reference/light) objects. Internally, transparent texts using this font are rendered in an alpha-blending pass.
          - `Font.NotoMono`: same characteristics as the `Font.Noto` font, but with equal spacing between characters (monospace).

    - name: "IsDoubleSided"
      type: "boolean"
      description: |
          Whether or not the [This] should be visible from the back, `true` by default.
    
    - name: "Format"
      type: "table"
      description: |
        Enable and configure text formatting using this property. Setting this to `nil` resets text format to default.

        Supported keys: `{ alignment=<value>, weight=<value>, slant=<value> }`,
        - `alignment` can be one of `"left"` (default), `"center"`, or `"right"`.
        - `weight` as a number between `0.0` and `2.0` (default `1.0`). The weight of the font controls how light or heavy it looks. You can also use the preset values `"bold"`, `"regular"` or `"light"`, which are simply equivalent to a weight of `1.2`, `1.0`, and `0.9` respectively.
        - `slant` as a number between `-1.0` and `1.0` (default `0.0`). The slant of the font controls how tilted the text is to the right or left. The preset values `"italic"` and `"regular"` can be used, they are equivalent to a slant of `0.2` and `0.0` respectively.
      
        All these options can be set at runtime or animated individually.

        Check the world `Text Format Showcase` to experiment with these options.
      samples:
        - code: |
            -- make a centered bold text
            t.Format = { alignment="center", weight="bold" }

            -- make a bold italic text
            t.Format = { weight="bold", slant="italic" }

            -- make a text using some custom weight and slant
            t.Format = { weight=1.5, slant=-0.1 }

    - name: "DrawMode"
      type: "table"
      description: |
        Enable and configure draw modes using this property. Setting this to `nil` disables all draw modes.

        Currently, one draw mode is supported: `{ outline=<table of options> }`
        
        Outline options are,
        - `weight` as a number between 0.0 and 1.0, disabling the outline at 0.0 to the maximum weight allowed by the font at 1.0.
        - `color` as a [Color](/reference/color).

        All these options can be set at runtime or animated individually.

        Check the world `Text Format Showcase` to experiment with these options.
      samples:
        - code: |
            t.DrawMode = {
              outline = { weight=0.5, color=Color(10, 15, 200) }
            }
    
    - name: "SortOrder"
      type: "integer"
      description: |
          Overrides rendering order for this text amongst other objects within its rendering pass, which is dictated by which features and font are in use. Can be set to an integer value between `0` (default) and `255`. A value of `0` means no override.

          Objects with overriden sort order are rendered from sort order `1` to sort order `255`, ignoring any normal ordering. You may assign the same sort order to multiple objects, in which case they are rendered unordered within that shared sort order.

          ⚠️ Note that enabling this will disable depth testing. This is an advanced feature, and it is not recommended to use if you aren't absolutely sure of having a need for it.

functions:
    - name: "GetCharacterSize"
      arguments:
        - name: "font"
          type: "Font"
        - name: "character"
          type: "string"
        - name: "points"
          type: "boolean"
          optional: true
      return:
        - type: "number"
      description: |
          Returns the size of a character for a given font (see [This].[Font](#property-font)). Note that this is a function of the global [Text] object.

          Use the optional parameter `points` if you are working with points scaling. For example if the text type is `TextType.Screen`, or if you are scaling your scene using [Screen](reference/screen).[Width](reference/screen#property-width) and [Screen](reference/screen).[Height](reference/screen#property-height) points values.

    - name: "LocalToCursor"
      arguments:
        - name: "localPos"
          type: "Number3"
        - name: "points"
          type: "boolean"
          optional: true
      return:
        - type: "Number2"
        - type: "integer"
      description: |
          Snaps a given position in [This]'s local space to the nearest character gap, and returns it as a 2-dimensional cursor position `Number2`. Additionally returns the following character index in [This]'s text string.

          Use the optional parameter `points` if you are working with points scaling. For example if the text type is `TextType.Screen`, or if you are scaling your scene using [Screen](reference/screen).[Width](reference/screen#property-width) and [Screen](reference/screen).[Height](reference/screen#property-height) points values.
    
    - name: "CharIndexToCursor"
      arguments:
        - name: "charIndex"
          type: "integer"
        - name: "points"
          type: "boolean"
          optional: true
      return:
        - type: "Number2"
        - type: "integer"
      description: |
          Converts a given character index in [This]'s text string, into a 2-dimensional cursor position `Number2`. Additionally returns the following character index in [This]'s text string.

          Use the optional parameter `points` if you are working with points scaling. For example if the text type is `TextType.Screen`, or if you are scaling your scene using [Screen](reference/screen).[Width](reference/screen#property-width) and [Screen](reference/screen).[Height](reference/screen#property-height) points values.
