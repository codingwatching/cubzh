keywords: ["blip", "game", "mobile", "scripting", "cube", "voxel", "world", "Minecraft", "Roblox", "code", "documentation", "docs"]
title: "Sample Scripts"
blocks:
    - text: |
        This page contains a collection of sample scripts demoing a good variety of features available in [Blip](https://blip.game).

        This list is not exaustive but is a great start to learn Blip, or even later on when looking for a reference when implementing one new kind of feature.

    - title: "Script Structure"
    - text: |
        This is the overall structure of a Blip script:
    - code: |
        -- A single Blip script is by default executed on the client AND server.
        -- A variable defined at the root level (local or global)
        -- will exist on both client and server:
        local someVariable = "hello"

        -- Client properties will only be considered on the client:

        function dropPlayer()
            Player:SetParent(World)
            Player.Position = {0, 40, 0}
        end

        Client.OnStart = function()
            print("game started!")
            dropPlayer()
        end

        Client.Action1 = function()
            if Player.IsOnGround then
                Player.Velocity.Y = 100
            end
        end

        Client.Tick = function(dt)
            -- tick at each frame, dt: time since last tick
            if Player.Position.Y < -100 then
                -- respawn player when falling off
                dropPlayer()
            end
        end

        Client.DidReceiveEvent = function(event)
            if event.message ~= nil then
                print("received: " .. event.message)
            end
        end

        -- Server properties will only be considered on the server:

        Server.OnStart = function()
            visits = 0
        end

        Server.OnPlayerJoin = function(p)
            -- Player `p` just joined the game, let's send a message:
            visits += 1
            local e = Event()
            e.message = "Hello " .. p.Username .. "! You are the " .. visits .. "th player to join!"
            e:SendTo(p)
        end

    - title: "User Interface"

    - subtitle: "Standard interface components"

    - code: |

        Client.OnStart = function()
            local ui = require("uikit")

            -- Button

            local button = ui:button({
                content = "Click me!",
            })

            -- All uikit components have their anchor on their bottom left corner.
            -- They are positioned relative to the bottom left corner of their parent.

            button.counter = 0
            button.text = "Click me! (clicked " .. button.counter .. " times)"

            -- We can use the screen size to center the button.
            button.pos = {(Screen.Size.X - button.Width) * 0.5, (Screen.Size.Y - button.Height) * 0.5}

            -- Add a callback to the button
            button.onRelease = function()
                button.counter += 1
                button.text = "Click me! (clicked " .. button.counter .. " times)"
                -- we changed the text, we need to update the button position to center it
                button.pos = {(Screen.Size.X - button.Width) * 0.5, (Screen.Size.Y - button.Height) * 0.5}
            end

            -- To be responsive, we can use the `parentDidResize` event.
            -- This event is called when the parent of the button is resized.
            button.parentDidResize = function(self)
                self.pos = {(Screen.Size.X - self.Width) * 0.5, (Screen.Size.Y - self.Height) * 0.5}
            end

            -- Text

            local text1 = ui:createText("Hello, world!")
            text1.pos = {0, 100}

            local text2 = ui:createText("Custom text :)", {
                color = Color(0, 0, 255),
                size = "default", -- options: "small", "default", "big"
                align = "center", -- options: "left", "center", "right"
                outline = 1.0,
                outlineColor = Color(128, 128, 255),
                bold = true,
            })

            text2.pos = {0, 50}
            
        end


